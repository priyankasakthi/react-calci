{"version":3,"sources":["App.js","component/ResultComponent.jsx","component/KeyPadComponent.jsx","serviceWorker.js","index.js"],"names":["App","onClick","button","calculate","reset","backspace","setState","result","state","checkResult","includes","replace","eval","e","slice","className","this","Component","ResultComponent","props","KeyPadComponent","name","target","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1046859c.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nimport ResultComponent from './component/ResultComponent';\nimport KeyPadComponent from './component/KeyPadComponent';\n\nclass App extends Component {\nconstructor(){\nsuper();\n\nthis.state = {\nresult: \"\"\n}\n}\n\nonClick = button => {\n\nif(button === \"=\"){\nthis.calculate()\n}\n\nelse if(button === \"C\"){\nthis.reset()\n}\nelse if(button === \"CE\"){\nthis.backspace()\n}\n\nelse {\nthis.setState({\nresult: this.state.result + button\n})\n}\n};\n\n\ncalculate = () => {\nvar checkResult = ''\nif(this.state.result.includes('--')){\ncheckResult = this.state.result.replace('--','+')\n}\n\nelse {\ncheckResult = this.state.result\n}\n\ntry {\nthis.setState({\n// eslint-disable-next-line\nresult: (eval(checkResult) || \"\" ) + \"\"\n})\n} catch (e) {\nthis.setState({\nresult: \"error\"\n})\n\n}\n};\n\nreset = () => {\nthis.setState({\nresult: \"\"\n})\n};\n\nbackspace = () => {\nthis.setState({\nresult: this.state.result.slice(0, -1)\n})\n};\n\nrender() {\nreturn (\n<div className='card '>\n<div className=\"calculator-body\">\n<h1>Calculator</h1>\n<ResultComponent result={this.state.result}/>\n<KeyPadComponent onClick={this.onClick}/>\n</div>\n</div>\n);\n}\n}\n\nexport default App;","import React, {Component} from 'react';\r\n\r\nclass ResultComponent extends Component {\r\n\r\n\r\nrender() {\r\nlet {result} = this.props;\r\nreturn (\r\n<div className=\"result bg-dark text-white\">\r\n<p>{result}</p>\r\n</div>\r\n);\r\n}\r\n}\r\n\r\n\r\nexport default ResultComponent;","import React, {Component} from 'react';\r\n\r\nclass KeyPadComponent extends Component {\r\n\r\nrender() {\r\nreturn (\r\n<div className=\"button\">\r\n<button  className='btn btn-primary c ' name=\"(\" onClick={e => this.props.onClick(e.target.name)}>(</button>\r\n<button  className='btn btn-primary c'name=\"CE\" onClick={e => this.props.onClick(e.target.name)}>CE</button>\r\n<button  className='btn btn-primary c'name=\")\" onClick={e => this.props.onClick(e.target.name)}>)</button>\r\n<button className='btn btn-danger c' name=\"C\" onClick={e => this.props.onClick(e.target.name)}>C</button><br/>\r\n\r\n\r\n<button name=\"1\"className='c' onClick={e => this.props.onClick(e.target.name)}>1</button>\r\n<button name=\"2\"className='c' onClick={e => this.props.onClick(e.target.name)}>2</button>\r\n<button name=\"3\"className='c' onClick={e => this.props.onClick(e.target.name)}>3</button>\r\n<button name=\"+\"className='a' onClick={e => this.props.onClick(e.target.name)}>+</button><br/>\r\n\r\n\r\n<button  name=\"4\" className='c' onClick={e => this.props.onClick(e.target.name)}>4</button>\r\n<button  name=\"5\" className='c' onClick={e => this.props.onClick(e.target.name)}>5</button>\r\n<button name=\"6\" className='c' onClick={e => this.props.onClick(e.target.name)}>6</button>\r\n<button name=\"-\" className='a'onClick={e => this.props.onClick(e.target.name)}>-</button><br/>\r\n\r\n<button name=\"7\" className='c' onClick={e => this.props.onClick(e.target.name)}>7</button>\r\n<button name=\"8\" className='c' onClick={e => this.props.onClick(e.target.name)}>8</button>\r\n<button name=\"9\" className='c' onClick={e => this.props.onClick(e.target.name)}>9</button>\r\n<button name=\"*\" className='a' onClick={e => this.props.onClick(e.target.name)}>x</button><br/>\r\n\r\n\r\n\r\n<button name=\"0\" className='c' onClick={e => this.props.onClick(e.target.name)}>0</button>\r\n<button name=\".\" className='c' onClick={e => this.props.onClick(e.target.name)}>.</button>\r\n<button name=\"=\" className='c' onClick={e => this.props.onClick(e.target.name)}>=</button>\r\n<button name=\"/\" className='a' onClick={e => this.props.onClick(e.target.name)}>รท</button><br/>\r\n</div>\r\n);\r\n}\r\n}\r\n\r\n\r\nexport default KeyPadComponent;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}